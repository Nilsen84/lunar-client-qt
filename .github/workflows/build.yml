name: Build and Release

on:
  push:
    branches: [ master ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build_windows:
    name: "Windows Build"

    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 5.15.2
        arch: win64_mingw81
        archives: qtbase qtsvg qttools
        setup-python: false

    - uses: msys2/setup-msys2@v2
      with:
        release: false
        update: false
        msystem: mingw64
        path-type: inherit
        install: >-
          zip
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          mingw-w64-x86_64-openssl

    - uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0

    - name: Fetch Tags
      run: git fetch --prune --tags -f

    - name: Configure CMake
      run: cmake . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "MinGW Makefiles"

    - name: Build
      run: mingw32-make -j2

    - name: Move built files to new directory
      shell: powershell
      run: |
        mkdir 'Lunar Client Qt'
        mv -Path @('lunar-client-qt.exe';jq -r '.agentsDestDir' config.json) -Destination 'Lunar Client Qt'

    - name: Package Qt
      run: windeployqt 'Lunar Client Qt' --compiler-runtime --no-angle --no-opengl-sw --no-virtualkeyboard --no-webkit2 --no-system-d3d-compiler --no-translations --no-quick-import

    - name: Package OpenSSL
      working-directory: 'Lunar Client Qt'
      run: cp -t . /mingw64/bin/{libssl*,libcrypto*}.dll

    - name: Compress
      run: zip -9 -r windows.zip 'Lunar Client Qt'

    - name: Upload Artifiact
      uses: actions/upload-artifact@v2
      with:
        name: windows
        path: ./windows.zip
  build_mac:
    name: "MacOS Build"
    runs-on: macos-10.15
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Fetch Tags
        run: git fetch --prune --tags -f
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          arch: 'clang_64'
          setup-python: 'false'
          archives: qtbase qtsvg qttools
        
      - name: Configure CMake
        run: cmake . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: make -j3
        
      - name: Package Dependencies
        run: |
          macdeployqt lunar-client-qt.app
          
      - name: Compress
        run: |
          tar -czvf mac.tar.gz lunar-client-qt.app
          
      - uses: actions/upload-artifact@v2
        with:
          name: mac
          path: ./mac.tar.gz
          
          
  build_arch:
    name: "Arch Linux Build"
    
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
      - name: Install Packages
        run: |
          pacman -Syu --noconfirm --needed qt5-base qt5-svg cmake base-devel git jq

      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Mark Repository as Safe
        run: git config --global safe.directory "$GITHUB_WORKSPACE"

      - name: Fetch Tags
        run: git fetch --prune --tags -f

      - name: Configure CMake
        run: cmake . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        
      - name: Build
        run: make -j2

      - name: Compress
        run: |
          mkdir 'Lunar Client Qt'
          jq '.agentsDestDir' config.json | xargs mv -t 'Lunar Client Qt' lunar-client-qt
          tar czvf linux.tar.gz 'Lunar Client Qt'

      - uses: actions/upload-artifact@v2
        with:
          name: linux
          path: ./linux.tar.gz

  create_release:
    name: "Create Release"
    needs: [build_windows, build_mac, build_arch]
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest

    steps:
    - name: Download Builds
      uses: actions/download-artifact@v3

    - name: Variables
      id: variables
      run: |
        echo "::set-output name=version::${GITHUB_REF_NAME#v}"

    - name: Create Release
      uses: softprops/action-gh-release@v0.1.14
      with:
        name: ${{ steps.variables.outputs.version }}
        draft: true
        fail_on_unmatched_files: true
        files: |
          linux/linux.tar.gz
          mac/mac.tar.gz
          windows/windows.zip